<?php namespace Ip; class View { const OVERRIDE_DIR = 'override'; private $file; private $data; private $doctype; static protected $overrides = array(); public function __construct($file, $data = array()) { self::checkData($data); $this->file = $file; $this->data = $data; $doctypeConstant = ipConfig()->get('defaultDoctype'); $this->doctype = constant('\Ip\Response\Layout::' . $doctypeConstant); } public function setVariables($variables) { $this->data = $variables; return $this; } public function getVariables() { return $this->data; } public function setVariable($name, $value) { $this->data[$name] = $value; return $this; } public function unsetVariable($name) { unset($this->data[$name]); return $this; } public function getVariable($name) { if (isset($this->data[$name])) { return $this->data[$name]; } return null; } public function render() { extract($this->data); ob_start(); $file = $this->file; if (!empty(self::$overrides[$file])) { $file = self::$overrides[$file]; } require($file); $output = ob_get_contents(); ob_end_clean(); return $output; } public function __toString() { try { $content = $this->render(); } catch (\Exception $e) { ipLog()->error( 'View.toStringException: Exception in View::__toString() method.', array('exception' => $e, 'view' => $this->file) ); if (ipConfig()->isDevelopmentEnvironment()) { return "<pre class=\"error\">\n" . $e->getMessage() . "\n" . $e->getTraceAsString() . "\n</pre>"; } else { return ''; } } return $content; } public function setDoctype($doctype) { $this->doctype = $doctype; return $this; } public function getDoctype() { return $this->doctype; } public function getThemeOption($name, $default = null) { $themeService = \Ip\Internal\Design\Service::instance(); return $themeService->getThemeOption($name, $default); } private static function checkData($data) { foreach ($data as $key => $value) { if (!preg_match('/^[a-zA-Z0-9_-]+$/', $key) || $key == '') { $source = ''; if (isset($backtrace[0]['file']) && $backtrace[0]['line']) { $source = "(Error source: " . ($backtrace[0]['file']) . " line: " . ($backtrace[0]['line']) . " ) "; } throw new \Ip\Exception\View("Incorrect view variable name '" . esc($key) . "' " . esc($source)); } } } public static function registerOverride($source, $destination) { self::$overrides[$source] = $destination; } public static function clearOverride($source) { unset(self::$overrides[$source]); } } ?>