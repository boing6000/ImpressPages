<?php namespace Ip; class Language { public $shortDescription; public $longDescription; public $url; public $code; public $visible; public $id; public $textDirection; public function __construct($id, $code, $url, $longDescription, $shortDescription, $visible, $textDirection) { $this->id = (int)$id; $this->code = $code; $this->url = $url; $this->longDescription = $longDescription; $this->shortDescription = $shortDescription; $this->visible = $visible; $this->textDirection = $textDirection; } public static function getByCode($languageCode) { $row = ipDb()->selectRow('language', '*', array('code' => $languageCode)); if (!$row) { return null; } return new self($row['id'], $row['code'], $row['url'], $row['title'], $row['abbreviation'], $row['isVisible'], $row['textDirection']); } public function getTitle() { return $this->longDescription; } public function getAbbreviation() { return $this->shortDescription; } public function getId() { return $this->id; } public function getCode() { return $this->code; } public function getUrlPath() { return $this->url == '' ? '' : $this->url . '/'; } public function isVisible() { return $this->visible; } public function getTextDirection() { return $this->textDirection; } public function isCurrent() { if ($this->getId() == ipContent()->getCurrentLanguage()->getId()) { return true; } else { return false; } } public function getLink() { $link = ipConfig()->baseUrl(); if (ipConfig()->get('rewritesDisabled')) { $link .= 'index.php/'; } $link .= \Ip\ServiceLocator::content()->getLanguage($this->getId())->getUrlPath(); return $link; } } ?>