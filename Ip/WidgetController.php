<?php namespace Ip; use Ip\Internal\Content\Model; class WidgetController { protected $name; protected $pluginName; protected $core; const SKIN_DIR = 'skin'; protected $widgetDir; protected $widgetAssetsDir; public function __construct($name, $pluginName, $core = false) { $this->name = $name; $this->pluginName = $pluginName; $this->core = $core; if ($this->core) { $this->widgetDir = 'Ip/Internal/' . $pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/'; } else { $this->widgetDir = 'Plugin/' . $pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/'; } $this->widgetAssetsDir = $this->widgetDir . \Ip\Application::ASSETS_DIR . '/'; } public function getTitle() { return self::getName(); } public function getName() { return $this->name; } public function getPluginName() { return $this->pluginName; } public function getWidgetDir() { return $this->widgetDir; } public function isCore() { return $this->core; } public function getIcon() { if ($this->core) { if (file_exists(ipFile($this->widgetAssetsDir . 'icon.svg'))) { return ipFileUrl($this->widgetAssetsDir . 'icon.svg'); } if (file_exists(ipFile($this->widgetAssetsDir . 'icon.png'))) { return ipFileUrl($this->widgetAssetsDir . 'icon.png'); } } else { if (file_exists(ipFile($this->widgetAssetsDir . 'icon.svg'))) { return ipFileUrl($this->widgetAssetsDir . 'icon.svg'); } if (file_exists(ipFile($this->widgetAssetsDir . 'icon.png'))) { return ipFileUrl($this->widgetAssetsDir . 'icon.png'); } } return ipFileUrl('Ip/Internal/Content/assets/img/iconWidget.svg'); } public function defaultData() { return array(); } public function getSkins() { $views = array(); $skinDir = ipFile($this->widgetDir . self::SKIN_DIR . '/'); if (!is_dir($skinDir)) { throw new \Ip\Exception\Content('Skins directory does not exist. ' . esc($skinDir)); } $availableViewFiles = scandir($skinDir); foreach ($availableViewFiles as $viewFile) { if (is_file($skinDir . $viewFile) && substr($viewFile, -4) == '.php') { $views[substr($viewFile, 0, -4)] = 1; } } if ($this->isCore()) { $themeViewsFolder = ipThemeFile( \Ip\View::OVERRIDE_DIR . '/Ip/Internal/' . $this->pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/' . self::SKIN_DIR ); } else { $themeViewsFolder = ipThemeFile( \Ip\View::OVERRIDE_DIR . '/Plugin/' . $this->pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/' . self::SKIN_DIR ); } if (is_dir($themeViewsFolder)) { $availableViewFiles = scandir($themeViewsFolder); foreach ($availableViewFiles as $viewFile) { if (is_file($themeViewsFolder . '/' . $viewFile) && substr($viewFile, -4) == '.php') { $views[substr($viewFile, 0, -4)] = 1; } } } $skins = array(); foreach ($views as $viewKey => $view) { if ($this->isCore()) { $translation = __(ucfirst($viewKey), 'Ip-admin', false); } else { $translation = __(ucfirst($viewKey), $this->pluginName, false); } $skins[] = array('name' => $viewKey, 'title' => $translation); } if (empty($skins)) { throw new \Ip\Exception\Content('No skins'); } return $skins; } public function update($widgetId, $postData, $currentData) { return $postData; } public function post($widgetId, $data) { } public function duplicate($oldId, $newId, $data) { return $data; } public function delete($widgetId, $data) { } public function adminHtmlSnippet() { $snippetDir = ipFile($this->getWidgetDir() . \Ip\Internal\Content\Model::SNIPPET_DIR) . '/'; if (!is_dir($snippetDir)) { return array(); } $snippetFiles = scandir($snippetDir); $snippet = ''; foreach ($snippetFiles as $snippetFile) { if (is_file($snippetDir . $snippetFile) && substr($snippetFile, -4) == '.php') { $snippet .= ipView($snippetDir . $snippetFile)->render(); } } return $snippet; } public function generateHtml($revisionId, $widgetId, $data, $skin) { try { if ($this->core) { $skinFile = 'Ip/Internal/' . $this->pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/' . self::SKIN_DIR . '/' . $skin . '.php'; } else { $skinFile = 'Plugin/' . $this->pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/' . self::SKIN_DIR . '/' . $skin . '.php'; } if (!is_file(ipFile($skinFile)) && !is_file(ipThemeFile(\Ip\View::OVERRIDE_DIR . '/' . $skinFile))) { $skin = 'default'; if ($this->core) { $skinFile = 'Ip/Internal/' . $this->pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/' . self::SKIN_DIR . '/' . $skin . '.php'; } else { $skinFile = 'Plugin/' . $this->pluginName . '/' . Model::WIDGET_DIR . '/' . $this->name . '/' . self::SKIN_DIR . '/' . $skin . '.php'; } } $answer = ipView($skinFile, $data)->render(); } catch (\Ip\Exception $e) { if (ipIsManagementState()) { $answer = $e->getMessage() . "\n " . $e->getTraceAsString(); } else { $answer = ''; } } return $answer; } public function dataForJs($revisionId, $widgetId, $data, $skin) { return $data; } public function optionsMenu($revisionId, $widgetId, $data, $skin) { return array(); } } ?>