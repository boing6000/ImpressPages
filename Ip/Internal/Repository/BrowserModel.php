<?php namespace Ip\Internal\Repository; class BrowserModel { protected static $instance; protected $supportedImageExtensions = array('jpg', 'jpeg', 'gif', 'png'); protected function __construct() { } protected function __clone() { } public static function instance() { if (!self::$instance) { self::$instance = new BrowserModel(); } return self::$instance; } public function pathMustBeInRepository($path, $secure) { if (!$path) { return; } if ($path && substr($path, -1) != '/') { $path .= '/'; } $relativePath = ipFile('file/repository/' . $path); if ($secure) { $relativePath = ipFile('file/secure/' . $path); } $relpath = realpath($relativePath); if ($secure) { if (strpos($relpath, realpath(ipFile('file/secure/'))) !== 0) { throw new \Ip\Exception("Restricted directory"); } } else { if (strpos($relpath, realpath(ipFile('file/repository/'))) !== 0) { throw new \Ip\Exception("Restricted directory"); } } } public function getPath($secure, $subdir, $absolute = true) { if ($subdir && substr($subdir, -1) != '/') { $subdir .= '/'; } $relativePath = 'file/repository/' . $subdir; if ($secure) { $relativePath = 'file/secure/' . $subdir; } $path = $relativePath; if ($absolute) { $path = ipFile($path); } return $path; } public function getAvailableFiles($seek, $limit, $filter, $filterExtensions, $secure = false, $subdir = null, &$answer = []) { $answer; if ($subdir && substr($subdir, -1) != '/') { $subdir .= '/'; } $repositoryDir = $this->getPath($secure, $subdir); $iterator = new \DirectoryIterator($repositoryDir); $iterator->seek($seek); while ($iterator->valid() && count($answer) < $limit) { if ($iterator->isFile()) { $fileData = $this->getFileData($iterator->getFilename(), $secure, $subdir); $append = null; switch ($filter) { case 'image': if (in_array($fileData['ext'], $this->supportedImageExtensions)) { $append = $fileData; } break; default: $append = $fileData; break; } if ($filterExtensions && !in_array($fileData['ext'], $filterExtensions)) { $append = null; } if ($append) { $answer[] = $append; } }else if($iterator->isDir() && !$iterator->isDot()){ $this->getAvailableFiles($seek, $limit, $filter, $filterExtensions, $secure, $subdir . $iterator->getFilename(), $answer); } $iterator->next(); } return $answer; } public function getFile($fileName, $secure = false, $path = null) { return $this->getFileData($fileName, $secure, $path); } private function getFileData($fileName, $secure, $subdir = null) { if ($subdir && substr($subdir, -1) != '/') { $subdir .= '/'; } $baseDir = $this->getPath($secure, $subdir, false); $file = ipFile($baseDir . $fileName); if (!file_exists($file) || !is_file($file)) { throw new \Ip\Exception\Repository("File doesn't exist " . esc($file)); } $pathInfo = pathinfo($file); $ext = strtolower(isset($pathInfo['extension']) ? $pathInfo['extension'] : ''); $data = array( 'fileName' => $subdir . $fileName, 'dir' => $subdir, 'ext' => $ext, 'previewUrl' => $this->createPreview($subdir . $fileName), 'originalUrl' => ipFileUrl($baseDir . $fileName), 'modified' => filemtime($file) ); if ($secure) { $data['originalUrl'] = null; } return $data; } private function createPreview($file) { $pathInfo = pathinfo($file); $ext = strtolower(isset($pathInfo['extension']) ? $pathInfo['extension'] : ''); $baseName = $pathInfo['basename']; if (in_array($ext, $this->supportedImageExtensions)) { $transform = array( 'type' => 'fit', 'width' => 140, 'height' => 140, 'forced' => true ); $reflection = ipReflection($file, $transform, $baseName); if ($reflection) { return ipFileUrl($reflection); } } return ipFileUrl('Ip/Internal/Repository/assets/icons/general.png'); } } ?>