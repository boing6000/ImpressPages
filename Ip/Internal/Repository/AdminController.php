<?php namespace Ip\Internal\Repository; class AdminController extends \Ip\Controller { public function createDir(){ ipRequest()->mustBePost(); $post = ipRequest()->getPost(); $dir = ipFile('file/repository/' . ipConfig()->get('repositoryFile') . '/' . $post['path']); $created = false; if(!is_dir($dir)){ mkdir($dir); $created = true; } $answer = array( 'success' => $created ); return new \Ip\Response\Json($answer); } public function getFolders(){ $base = ipFile('file/repository/' . ipConfig()->get('repositoryFile')) . '/'; $directories = glob($base . '*' , GLOB_ONLYDIR); foreach ($directories as $key => $directory) { $directories[$key] = str_replace($base, '', $directory); } $answer = array( 'folders' => $directories ); return new \Ip\Response\Json($answer); } public function storeNewFiles() { ipRequest()->mustBePost(); $post = ipRequest()->getPost(); $secure = !empty($post['secure']); $path = isset($post['path']) && $post['path'] != '' ? ipConfig()->get('repositoryFile') . '/' . $post['path'] : ipConfig()->get('repositoryFile'); $browserModel = BrowserModel::instance(); $browserModel->pathMustBeInRepository($path, $secure); if (!isset($post['files']) || !is_array($post['files'])) { return new \Ip\Response\Json(array('status' => 'error', 'errorMessage' => 'Missing POST variable')); } $files = isset($post['files']) ? $post['files'] : []; $newFiles = []; $destination = $browserModel->getPath($secure, $path); foreach ($files as $file) { $sourceDir = 'file/tmp/'; if ($secure) { $sourceDir = 'file/secure/tmp/'; } $source = ipFile($sourceDir . $file['fileName']); $source = realpath($source); if (strpos($source, realpath(ipFile($sourceDir))) !== 0) { ipLog()->alert('Core.triedToAccessNonPublicFile', array('file' => $file['fileName'])); continue; } $newName = \Ip\Internal\File\Functions::genUnoccupiedName($file['renameTo'], $destination); copy($source, $destination . $newName); unlink($source); $browserModel = \Ip\Internal\Repository\BrowserModel::instance(); $newFile = $browserModel->getFile($newName, $secure, $path); $newFiles[] = $newFile; } $answer = array( 'status' => 'success', 'files' => $newFiles ); return new \Ip\Response\Json($answer); } public function getAll() { $query = ipRequest()->getQuery(); $seek = isset($query['seek']) ? (int)$query['seek'] : 0; $limit = 10000; $filter = isset($query['filter']) ? $query['filter'] : null; $filterExtensions = $query['filterExtensions'] ? $query['filterExtensions'] : null; if (is_string($filterExtensions)) { $filterExtensions = array($filterExtensions); } $secure = isset($query['secure']) ? (int)$query['secure'] : null; $path = isset($post['path']) && $post['path'] != '' ? ipConfig()->get('repositoryFile') . '/' . $post['path'] : ipConfig()->get('repositoryFile'); $browserModel = BrowserModel::instance(); $browserModel->pathMustBeInRepository($path, $secure); $files = $browserModel->getAvailableFiles($seek, $limit, $filter, $filterExtensions, $secure, $path); usort($files, array($this, 'sortFiles')); $fileGroups = []; foreach ($files as $file) { $dir = explode('/', $file['dir']); $dir = $dir[count($dir) - 2]; $dir = $dir === ipConfig()->get('repositoryFile') ? 'Padrão' : $dir; $fileGroups[$dir][] = $file; } $answer = array( 'fileGroups' => $fileGroups ); return new \Ip\Response\Json($answer); } private function sortFiles($a, $b) { if ($a['modified'] == $b['modified']) { return 0; } return ($a['modified'] > $b['modified']) ? -1 : 1; } public function deleteFiles() { ipRequest()->mustBePost(); $post = ipRequest()->getPost(); $secure = !empty($post['secure']); $files = isset($post['files']) ? $post['files'] : null; $deletedFiles = []; $notRemovedCount = 0; $forced = ipRequest()->getPost('forced', false); foreach ($files as $file) { if (isset($file['fileName']) && $this->removeFile($file['fileName'], $secure, $forced)) { $deletedFiles[] = $file['fileName']; } else { $notRemovedCount++; } } $answer = array( 'success' => true, 'deletedFiles' => $deletedFiles, 'notRemovedCount' => $notRemovedCount ); return new \Ip\Response\Json($answer); } private function removeFile($file, $secure, $forced = false) { if (basename($file) == '.htaccess') { return false; } $baseDir = 'file/repository/'; if ($secure) { $baseDir = 'file/secure/'; } $realFile = realpath(ipFile($baseDir . $file)); if (strpos($realFile, realpath(ipFile($baseDir))) !== 0) { return false; } $model = Model::instance(); $usages = $model->whoUsesFile($file); if (!$forced && !empty($usages)) { return false; } if (!$secure) { $reflectionModel = ReflectionModel::instance(); $reflectionModel->removeReflections($file); } if (file_exists($realFile) && is_file($realFile) && is_writable($realFile)) { unlink($realFile); } return true; } public function addFromUrl() { if (!ipAdminPermission('Repository upload')) { throw new \Ip\Exception("Permission denied"); } if (!isset($_POST['files']) || !is_array($_POST['files'])) { throw new \Ip\Exception('Invalid parameters.'); } $files = $_POST['files']; if (function_exists('set_time_limit')) { set_time_limit(count($files) * 60 + 30); } $answer = []; foreach ($files as $file) { if (!empty($file['url']) && !empty($file['title'])) { $fileData = $this->downloadFile($file['url'], $file['title']); if ($fileData) { $answer[] = $fileData; } } } return new \Ip\Response\Json($answer); } protected function downloadFile($url, $title) { $net = new \Ip\Internal\NetHelper(); $tmpFilename = $net->downloadFile($url, ipFile('file/tmp/'), 'pixabay_' . time(), true); if (!$tmpFilename) { return null; } try { $mime = \Ip\Internal\File\Functions::getMimeType(ipFile('file/tmp/' . $tmpFilename)); switch ($mime) { case 'image/png': $ext = '.jpg'; break; case 'image/gif': $ext = '.gif'; break; case 'image/bmp': $ext = '.bmp'; break; case 'image/pjpeg': case 'image/jpeg': default: $ext = '.jpg'; break; } } catch (\Ip\PhpException $e) { $ext = '.jpg'; } $title = \Ip\Internal\File\Functions::cleanupFileName($title); $words = explode(' ', $title); $cleanTitle = ''; foreach ($words as $word) { if (strlen($cleanTitle . '_' . $word) > 30) { break; } if ($cleanTitle != '') { $cleanTitle .= '_'; } $cleanTitle .= $word; } if ($cleanTitle == '') { $cleanTitle = 'file'; } $siteRepository = ipConfig()->get('repositoryFile') . '/pixabay/'; if(!is_dir(ipfile('file/repository/' . $siteRepository))){ mkdir(ipfile('file/repository/' . $siteRepository)); } $niceFileName = $cleanTitle . $ext; $destinationDir = ipFile('file/repository/' . $siteRepository); $destinationFileName = \Ip\Internal\File\Functions::genUnoccupiedName($niceFileName, $destinationDir); copy(ipFile('file/tmp/' . $tmpFilename), $destinationDir . $destinationFileName); unlink(ipFile('file/tmp/' . $tmpFilename)); $browserModel = \Ip\Internal\Repository\BrowserModel::instance(); $file = $browserModel->getFile($siteRepository.$destinationFileName); return $file ; } } ?>