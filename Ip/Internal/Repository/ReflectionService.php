<?php namespace Ip\Internal\Repository; class ReflectionService { protected static $instance; protected $lastException = null; protected function __construct() { } protected function __clone() { } public static function instance() { if (!self::$instance) { self::$instance = new ReflectionService(); } return self::$instance; } public function getReflection($file, $options, $desiredName = null, $onDemand = true) { $reflectionModel = ReflectionModel::instance(); try { $reflection = $reflectionModel->getReflection($file, $options, $desiredName, $onDemand); if (ipConfig()->get('rewritesDisabled') && !is_file(ipFile('file/' . $reflection)) || !ipConfig()->get('realTimeReflections', true)) { $reflectionRecord = $reflectionModel->getReflectionByReflection($reflection); $reflectionModel->createReflection( $reflectionRecord['original'], $reflectionRecord['reflection'], json_decode($reflectionRecord['options'], true) ); } } catch (\Exception $e) { ipLog()->error($e->getMessage(), array('errorTrace' => $e->getTraceAsString())); $this->lastException = $e; return false; } return 'file/' . $reflection; } public function getLastException() { return $this->lastException; } } ?>