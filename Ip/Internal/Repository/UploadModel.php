<?php namespace Ip\Internal\Repository; class UploadModel { protected $uploadedFileName; protected $uploadedFile; protected $targetDir; protected function __construct() { } protected function __clone() { } public static function instance() { return new UploadModel(); } public function handlePlupload($secureFolder) { if (!$secureFolder && !ipAdminId()) { throw new \Ip\Exception\Repository\Upload("Trying to upload image to temporary directory without permission."); } if ($secureFolder) { $targetDir = ipFile('file/secure/tmp/'); } else { $targetDir = ipFile('file/tmp/'); } if ($secureFolder) { $sizeLimit = ipGetOption('Repository.publicUploadLimit', 4000); if ($this->folderSize($targetDir) > $sizeLimit * 1000000) { ipLog()->error( "Repository.publicUploadLimitReached: IP: `{ip}`. CurrentLimit `{limit}Mb`. Please update Repository.publicUploadLimit option to increase the limits.", array('ip' => $_SERVER['REMOTE_ADDR'], 'limit' => $sizeLimit) ); throw new \Ip\Exception("Upload limit reached"); } } $chunk = isset($_REQUEST["chunk"]) ? $_REQUEST["chunk"] : 0; $chunks = isset($_REQUEST["chunks"]) ? $_REQUEST["chunks"] : 0; $fileName = isset($_REQUEST["name"]) ? $_REQUEST["name"] : ''; $fileName = \Ip\Internal\File\Functions::cleanupFileName($fileName); if ($chunks < 2 && file_exists($targetDir . $fileName)) { $fileName = \Ip\Internal\File\Functions::genUnoccupiedName($fileName, $targetDir); } $fileExtension = strtolower(substr($fileName, strrpos($fileName, '.') + 1)); $whiteListExtensions = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png', 'bmp', 'tif', 'tiff', 'ico', 'asf', 'asx', 'wmv', 'wmx', 'wm', 'avi', 'divx', 'flv', 'mov', 'qt', 'mpeg', 'mpg', 'mpe', 'mp4', 'm4v', 'ogv', 'webm', 'mkv', 'txt', 'asc', 'c', 'cc', 'h', 'csv', 'tsv', 'ics', 'rtx', 'css', 'htm', 'html', 'vtt', 'mp3', 'm4a', 'm4b', 'ra', 'ram', 'wav', 'ogg', 'oga', 'mid', 'midi', 'wma', 'wax', 'mka', 'rtf', 'js', 'pdf', 'class', 'tar', 'zip', 'gz', 'gzip', 'rar', '7z', 'doc', 'pot', 'pps', 'ppt', 'wri', 'xla', 'xls', 'xlt', 'xlw', 'mdb', 'mpp', 'docx', 'docm', 'dotx', 'dotm', 'eps', 'xlsx', 'xlsm', 'xlsb', 'xltx', 'xltm', 'xlam', 'pptx', 'pptm', 'ppsx', 'ppsm', 'potx', 'potm', 'ppam', 'sldx', 'sldm', 'onetoc', 'onetoc2', 'onetmp', 'onepkg', 'odt', 'odp', 'ods', 'odg', 'odc', 'odb', 'odf', 'wp', 'wpd', 'key', 'numbers', 'pages', 'xml', 'json', 'iso', 'aac', 'img', 'psd', 'ai', 'sql', 'swf', 'svg' ); $whiteListExtensions = ipFilter('ipWhiteListExtensions', $whiteListExtensions); if (!empty($fileExtension) && !in_array($fileExtension, $whiteListExtensions)) { throw new \Ip\Exception\Repository\Upload\ForbiddenFileExtension("Files with extension (." . esc( $fileExtension ) . ") are not permitted for security reasons.", array( 'extension' => $fileExtension, 'filename' => $fileName )); } $contentType = null; if (isset($_SERVER["HTTP_CONTENT_TYPE"])) { $contentType = $_SERVER["HTTP_CONTENT_TYPE"]; } if (isset($_SERVER["CONTENT_TYPE"])) { $contentType = $_SERVER["CONTENT_TYPE"]; } if (strpos($contentType, "multipart") !== false) { if (!isset($_FILES['file']['tmp_name']) || !is_uploaded_file($_FILES['file']['tmp_name'])) { throw new \Ip\Exception\Repository\Upload("Failed to move uploaded file."); } $out = fopen($targetDir . $fileName, $chunk == 0 ? "wb" : "ab"); if (!$out) { throw new \Ip\Exception\Repository\Upload("Failed to open output stream."); } $this->setFileUploadedByThisUser($targetDir . $fileName); $in = fopen($_FILES['file']['tmp_name'], "rb"); if (!$in) { throw new \Ip\Exception\Repository\Upload("Failed to open input stream."); } while ($buff = fread($in, 4096)) { fwrite($out, $buff); } fclose($in); fclose($out); @unlink($_FILES['file']['tmp_name']); } else { $out = fopen($targetDir . '/' . $fileName, $chunk == 0 ? "wb" : "ab"); if (!$out) { throw new \Ip\Exception\Repository\Upload("Failed to open output stream."); } $in = fopen("php://input", "rb"); if (!$in) { throw new \Ip\Exception\Repository\Upload("Failed to open input stream."); } while ($buff = fread($in, 4096)) { if (function_exists('set_time_limit')) { set_time_limit(30); } fwrite($out, $buff); } fclose($in); fclose($out); } $this->uploadedFileName = $fileName; $this->uploadedFile = $targetDir . $fileName; $this->targetDir = $targetDir; } protected function setFileUploadedByThisUser($file) { $_SESSION['modules']['administrator']['repository']['userFiles'][] = $file; } public function isFileUploadedByCurrentUser($file, $secure) { if (!isset($_SESSION['modules']['administrator']['repository']['userFiles'])) { return false; } if ($secure) { $targetDir = ipFile('file/secure/tmp/'); } else { $targetDir = ipFile('file/tmp/'); } $isUploaded = in_array($targetDir . $file, $_SESSION['modules']['administrator']['repository']['userFiles']); return $isUploaded; } public function getUploadedFileName() { return $this->uploadedFileName; } public function getUploadedFile() { return $this->uploadedFile; } public function getTargetDir() { return $this->targetDir; } public function getUploadedFilePath($fileName, $secure) { if (!$this->isFileUploadedByCurrentUser($fileName, $secure)) { throw new \Ip\Exception\Repository\Upload("This user didn't upload this file or session has ended."); } return ipFile('file/secure/tmp/' . $fileName); } protected function folderSize($path) { $totalSize = 0; $files = scandir($path); $cleanPath = rtrim($path, '/') . '/'; foreach ($files as $t) { if ($t != "." && $t != "..") { $currentFile = $cleanPath . $t; if (is_dir($currentFile)) { $size = $this->folderSize($currentFile); $totalSize += $size; } else { $size = filesize($currentFile); $totalSize += $size; } } } return $totalSize; } } ?>