<?php namespace Ip\Internal\Repository; class Model { protected static $instance; protected function __construct() { } protected function __clone() { } public static function instance() { if (!self::$instance) { self::$instance = new Model(); } return self::$instance; } public static function bindFile($file, $plugin, $instanceId, $baseDir = 'file/repository/') { $row = array( 'filename' => $file, 'plugin' => $plugin, 'instanceId' => $instanceId, 'createdAt' => time(), 'baseDir' => $baseDir ); ipDb()->insert('repository_file', $row); } public static function unbindFile($file, $plugin, $instanceId, $baseDir = 'file/repository/') { $condition = array( 'fileName' => $file, 'plugin' => $plugin, 'instanceId' => $instanceId, 'baseDir' => $baseDir ); $sql = 'DELETE FROM ' . ipTable('repository_file') . '
                WHERE filename = :fileName
                AND plugin = :plugin
                AND instanceId = :instanceId
                AND baseDir = :baseDir
                LIMIT 1'; ipDb()->execute($sql, $condition); $usages = self::whoUsesFile($file); if (empty($usages)) { $reflectionModel = ReflectionModel::instance(); $reflectionModel->removeReflections($file); } } public static function whoUsesFile($file) { return ipDb()->selectAll('repository_file', '*', array('fileName' => $file)); } public function findFiles($plugin, $instanceId = null) { $where = array( 'plugin' => $plugin ); if ($instanceId !== null) { $where['instanceId'] = $instanceId; } return ipDb()->selectAll('repository_file', '*', $where); } public function addFile($file, $desiredName) { if (!is_file($file)) { throw new \Ip\Exception("File doesn't exist"); } if (strpos(realpath($file), realpath(ipFile('file/repository/'))) === 0) { throw new \Ip\Exception("Requested file (" . $file . ") is already in the repository"); } $destination = ipFile('file/repository/'); if ($desiredName === null) { $desiredName = basename($file); } $newName = \Ip\Internal\File\Functions::genUnoccupiedName($desiredName, $destination); copy($file, $destination . $newName); return $newName; } } ?>