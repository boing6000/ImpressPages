<?php namespace Ip; class Options { public function getOption($key, $defaultValue = null) { $parts = explode('.', $key, 2); if (!isset($parts[1])) { $backtrace = debug_backtrace(); $source = null; if (isset($backtrace[1]['file']) && $backtrace[1]['line']) { $source = "(Error source: " . ($backtrace[1]['file']) . " line: " . ($backtrace[1]['line']) . " ) "; } throw new \Ip\Exception("Option key must have plugin name separated by dot. " . $source); } return \Ip\ServiceLocator::storage()->get('Config', $parts[0] . '.' . $parts[1], $defaultValue); } public function getOptionLang($key, $languageCode, $defaultValue = null) { $parts = explode('.', $key, 2); if (!isset($parts[1])) { throw new \Ip\Exception("Option key must have plugin name separated by dot."); } $answer = \Ip\ServiceLocator::storage()->get('Config', $parts[0] . '.' . $languageCode . '.' . $parts[1]); if ($answer === null) { $answer = ipGetOption($key, $defaultValue); } return $answer; } public function setOption($key, $value) { $parts = explode('.', $key, 2); if (!isset($parts[1])) { throw new \Ip\Exception("Option key must have plugin name separated by dot."); } \Ip\ServiceLocator::storage()->set('Config', $parts[0] . '.' . $parts[1], $value); } public function setOptionLang($key, $languageCode, $value) { $parts = explode('.', $key, 2); if (!isset($parts[1])) { throw new \Ip\Exception("Option key must have plugin name separated by dot."); } \Ip\ServiceLocator::storage()->set('Config', $parts[0] . '.' . $languageCode . '.' . $parts[1], $value); } public function removeOption($key) { $parts = explode('.', $key, 2); if (!isset($parts[1])) { throw new \Ip\Exception("Option key must have plugin name separated by dot."); } \Ip\ServiceLocator::storage()->remove('Config', $parts[0] . '.' . $parts[1]); } public function removeOptionLang($key, $languageId) { $parts = explode('.', $key, 2); if (!isset($parts[1])) { throw new \Ip\Exception("Option key must have plugin name separated by dot."); } \Ip\ServiceLocator::storage()->remove('Config', $parts[0] . '.' . $languageId . '.' . $parts[1]); } public function import($configFile) { $content = file_get_contents($configFile); $values = json_decode($content, true); if (!is_array($values)) { throw new \Ip\Exception("Can't parse configuration file: " . esc($configFile)); } foreach ($values as $key => $value) { ipSetOption($key, $value); } } function getAllOptions() { $optionValues = \Ip\ServiceLocator::storage()->getAll('Config'); $options = array(); foreach ($optionValues as $option) { $options[$option['key']] = $option['value']; } return $options; } } ?>