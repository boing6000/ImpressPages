<?php namespace Ip; class Block { private $exampleContent = ''; private $name; private $isStatic = false; public function __construct($name) { $this->name = $name; } public function render($revisionId = 0) { $data = array( 'blockName' => $this->name, ); $content = ipJob('ipGenerateBlock', $data); if ($content) { if (is_object($content) && method_exists($content, 'render')) { $content = $content->render(); } return (string)$content; } else { $content = $this->generateBlockHtml($revisionId); } return ipFilter('ipBlockContent', $content, $data); } private function generateBlockHtml($revisionId) { $predefinedContent = \Ip\ServiceLocator::content()->getBlockContent($this->name); if ($predefinedContent !== null) { return $predefinedContent; } if (ipContent()->getCurrentPage() == null && $revisionId == 0 && !$this->isStatic) { return ''; } if ($this->isStatic) { $languageId = ipContent()->getCurrentLanguage()->getId(); $revisionId = 0; } else { if ($revisionId === 0) { $revision = \Ip\ServiceLocator::content()->getCurrentRevision(); if ($revision) { $revisionId = $revision['revisionId']; } } $languageId = 0; } return \Ip\Internal\Content\Model::generateBlock( $this->name, $revisionId, $languageId, ipIsManagementState(), $this->exampleContent ); } public function asStatic() { $this->isStatic = true; return $this; } public function exampleContent($content) { $this->exampleContent = $content; return $this; } public function exampleContentFrom($filename) { $this->exampleContent = ipView(ipThemeFile($filename)); return $this; } public function __toString() { try { $content = $this->render(); } catch (\Exception $e) { ipLog()->error( 'Block.toStringException: Exception in block `{block}` __toString() method.', array('block' => $this->name, 'exception' => $e) ); return $e->getTraceAsString(); } return $content; } } ?>