<?php namespace Ip; class Content { protected $languages; protected $blockContent; protected $currentLanguage; protected $currentPage; protected $currentRevision; public function __construct() { } public function getCurrentLanguage() { return $this->currentLanguage; } public function _setCurrentLanguage($currentLanguage) { $this->currentLanguage = $currentLanguage; } public function getPage($pageId) { try { $page = new \Ip\Page($pageId); } catch (\Ip\Exception $e) { return null; } return $page; } public function getPageByAlias($alias, $languageCode = null) { if ($languageCode === null) { $languageCode = ipContent()->getCurrentLanguage()->getCode(); } $row = ipDb()->selectRow( 'page', '*', array('alias' => $alias, 'languageCode' => $languageCode, 'isDeleted' => 0) ); if (!$row) { return null; } return new \Ip\Page($row); } public function getCurrentPage() { return $this->currentPage; } public function _setCurrentPage($page) { $this->currentPage = $page; $this->currentRevision = null; } public function getLanguage($id) { $id = (int)$id; foreach ($this->getLanguages() as $language) { if ($language->getId() === $id) { return $language; } } return false; } public function getLanguageByCode($code) { foreach ($this->getLanguages() as $language) { if ($language->getCode() === $code) { return $language; } } return null; } public function getLanguages() { if ($this->languages === null) { if (!ipConfig()->database()) { $this->languages = []; } else { $languages = \Ip\Internal\Languages\Service::getLanguages(); $this->languages = array(); foreach ($languages as $data) { $this->languages[] = \Ip\Internal\Content\Helper::createLanguage($data); } } } return $this->languages; } public function _invalidateLanguages() { $this->languages = null; } public function getBlockContent($block) { if (isset($this->blockContent[$block])) { return $this->blockContent[$block]; } else { return null; } } public function setBlockContent($block, $content) { $this->blockContent[$block] = $content; } public function generateBlock($blockName) { return new \Ip\Block($blockName); } public function getCurrentRevision() { if ($this->currentRevision !== null) { return $this->currentRevision; } if (!$this->currentPage) { return null; } $revision = null; $pageId = $this->currentPage->getId(); if (ipRequest()->getQuery('_revision') && ipAdminId()) { $revisionId = ipRequest()->getQuery('_revision'); $revision = \Ip\Internal\Revision::getRevision($revisionId); if ($revision['pageId'] != $pageId) { $revision = null; } } if (!$revision && ipIsManagementState()) { $revision = \Ip\Internal\Revision::getLastRevision($pageId); if ($revision['isPublished']) { $duplicatedId = \Ip\Internal\Revision::duplicateRevision($revision['revisionId']); $revision = \Ip\Internal\Revision::getRevision($duplicatedId); } } if (!$revision) { $revision = \Ip\Internal\Revision::getPublishedRevision($this->currentPage->getId()); } $this->currentRevision = $revision; return $this->currentRevision; } public function getBreadcrumb($pageId = null) { if ($pageId !== null) { $page = new \Ip\Page($pageId); } else { $page = ipContent()->getCurrentPage(); } if ($page) { $pages[] = $page; $parentPageId = $page->getParentId(); while (!empty($parentPageId)) { $parentPage = new \Ip\Page($parentPageId); $pages[] = $parentPage; $parentPageId = $parentPage->getParentId(); } } $breadcrumb = array(); if (!empty($pages)) { array_pop($pages); $breadcrumb = $pages; } $breadcrumb = array_reverse($breadcrumb); $breadcrumb = ipFilter('ipBreadcrumb', $breadcrumb); return $breadcrumb; } public function getTitle() { if ($this->currentPage) { return $this->currentPage->getMetaTitle() ? $this->currentPage->getMetaTitle( ) : $this->currentPage->getTitle(); } return ''; } public function getDescription() { if ($this->currentPage) { return $this->currentPage->getDescription(); } return ''; } public function getKeywords() { if ($this->currentPage) { return $this->currentPage->getKeywords(); } return ''; } public function addLanguage($title, $abbreviation, $code, $url, $visible, $textDirection = 'ltr', $position = null) { $languageId = \Ip\Internal\Languages\Service::addLanguage( $title, $abbreviation, $code, $url, $visible, $textDirection, $position = null ); return $languageId; } public function deleteLanguage($languageId) { \Ip\Internal\Languages\Service::delete($languageId); } public function updatePage($pageId, $data) { \Ip\Internal\Pages\Service::updatePage($pageId, $data); } public function addPage($parentId, $title, $data = array()) { $newPageId = \Ip\Internal\Pages\Service::addPage($parentId, $title, $data); return $newPageId; } public function copyPage($pageId, $destinationParentId, $destinationPosition) { $pageId = \Ip\Internal\Pages\Service::copyPage($pageId, $destinationParentId, $destinationPosition); return $pageId; } public function movePage($pageId, $destinationParentId, $destinationPosition) { \Ip\Internal\Pages\Service::movePage($pageId, $destinationParentId, $destinationPosition); } public function deletePage($pageId) { \Ip\Internal\Pages\Service::deletePage($pageId); } public function getChildren( $parentId = null, $from = null, $till = null, $orderBy = 'pageOrder', $direction = 'ASC' ) { if ($parentId === null) { $parentId = $this->getCurrentPage()->getId(); } $page = $this->getPage($parentId); if (!$page) { return array(); } return $page->getChildren($from, $till, $orderBy, $direction); } public function getPageMenu($pageId = null) { if ($pageId === null) { $page = $this->getCurrentPage(); } else { $page = $this->getPage($pageId); } if (!$page) { return false; } $rootPage = $page; while ($page = $this->getPage($page->getParentId())) { $rootPage = $page; } return $rootPage; } public function getMenus($languageCode = null) { $result = \Ip\Internal\Pages\Service::getMenus($languageCode); $objectArray = array(); foreach ($result as $menuData) { $objectArray[] = new \Ip\Page($menuData); } return $objectArray; } public static function getMenu($languageCode, $alias) { $result = \Ip\Internal\Pages\Service::getMenu($languageCode, $alias); if ($result) { return new \Ip\Page($result); } return $result; } public function addMenu($languageCode, $alias, $title, $type = 'tree') { return \Ip\Internal\Pages\Service::createMenu($languageCode, $alias, $title, $type); } public function deleteMenu($languageCode, $alias) { $menu = $this->getMenu($languageCode, $alias); if ($menu) { $this->deletePage($menu->getId()); } } public function getDefaultPageId($languageCode = null) { if ($languageCode == null) { $languageCode = ipContent()->getCurrentLanguage()->getCode(); } $pageId = ipJob('ipDefaultPageId', array('languageCode' => $languageCode)); return $pageId; } } ?>