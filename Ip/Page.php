<?php namespace Ip; class Page { protected $id; protected $title; protected $urlPath; protected $languageCode; protected $metaTitle; protected $keywords; protected $description; protected $updatedAt; protected $createdAt; protected $parentId; protected $alias; protected $layout; protected $redirectUrl; protected $isVisible; protected $inBreadcrumb = null; protected $isDisabled = false; protected $isSecured = false; protected $isBlank = false; public function __construct($id) { if (is_int($id) || ctype_digit($id)) { $page = ipDb()->selectRow('page', '*', array('id' => $id, 'isDeleted' => 0)); if (!$page) { $id = esc($id); throw new \Ip\Exception("Page #" . esc($id) . " not found."); } } elseif (is_array($id)) { $page = $id; } else { $page = ipDb()->selectRow('page', '*', array('alias' => $id, 'isDeleted' => 0)); if (!$page) { throw new \Ip\Exception("Page #" . esc($id) . " not found."); } } foreach ($page as $key => $value) { $this->{$key} = $value; } } public function init(\Ip\Controller $controller) { } public function getId() { return $this->id; } public function setId($id) { $this->id = $id; } public function getTitle() { return $this->title; } public function setTitle($title) { $this->title = $title; } public function getMetaTitle() { return $this->metaTitle; } public function getLanguageCode() { return $this->languageCode; } public function setMetaTitle($metaTitle) { $this->metaTitle = $metaTitle; } public function getKeywords() { return $this->keywords; } public function setKeywords($keywords) { $this->keywords = $keywords; } public function getDescription() { return $this->description; } public function setDescription($description) { $this->description = $description; } public function getUpdatedAt() { return $this->updatedAt; } public function setUpdatedAt($updatedAt) { $this->updatedAt = $updatedAt; } public function getCreatedAt() { return $this->createdAt; } public function setCreatedAt($createdAt) { $this->createdAt = $createdAt; } public function getParentId() { return $this->parentId; } public function setParentId($parentId) { $this->parentId = $parentId; } public function getLink() { $path = str_replace('%2F', '/', rawurlencode($this->urlPath)); return ipHomeUrl($this->getLanguageCode()) . $path; } public function getUrlPath() { return $this->urlPath; } public function setUrlPath($urlPath) { $this->urlPath = $urlPath; } public function isCurrent() { $curPage = ipContent()->getCurrentPage(); return $curPage && $this->getId() == ipContent()->getCurrentPage()->getId(); } public function isInCurrentBreadcrumb() { if ($this->inBreadcrumb === null) { $breadcrumb = ipContent()->getBreadcrumb(); $ids = array(); foreach ($breadcrumb as $page) { $ids[] = $page->getId(); } $this->inBreadcrumb = in_array($this->getId(), $ids); } return $this->inBreadcrumb; } public function getRedirectUrl() { return $this->redirectUrl; } public function setRedirectUrl($redirectUrl) { $this->redirectUrl = $redirectUrl; } public function isVisible() { return $this->isVisible; } public function setIsVisible($visible) { $this->isVisible = $visible; } public function isDisabled() { return $this->isDisabled; } public function setIsDisabled($disabled) { $this->isDisabled = $disabled; } public function isSecured() { return $this->isSecured; } public function setIsSecured($secured) { $this->isSecured = $secured; } public function isBlank() { return $this->isBlank; } public function setIsBlank($isBlank) { $this->isBlank = $isBlank; } public static function createList($list) { $pages = array(); foreach ($list as $page) { $pages[] = new \Ip\Page($page); } return $pages; } public function getChildren($from = null, $till = null, $orderBy = 'pageOrder', $direction = 'ASC') { switch ($orderBy) { case 'pageOrder': case 'title': case 'metaTitle': case 'createdAt': case 'updatedAt': case 'deletedAt': break; default: throw new \Ip\Exception("getChildren can't accept " . esc($orderBy) . " as an order field."); } if (strtoupper($direction) == 'ASC') { $direction = 'ASC'; } else { $direction = 'DESC'; } $table = ipTable('page'); $sql = "
        SELECT
            *
        FROM
            $table
        WHERE
            parentId = :parentId AND
            isVisible = 1 AND
            isDeleted = 0
        ORDER BY
            " . $orderBy . "
            " . $direction . "
        "; $params = array('parentId' => $this->id); if ($from !== null || $till !== null) { $sql .= " LIMIT " . (int)$from . " , " . (int)$till; } $list = ipDb()->fetchAll($sql, $params); return static::createList($list); } public function getAlias() { return $this->alias; } public function setAlias($alias) { $this->alias = $alias; } public function getLayout() { if ($this->layout) { return $this->layout; } else { $menu = ipContent()->getPageMenu($this->id); if ($menu->getId() == $this->id) { return 'main.php'; } $layout = $menu->getLayout(); return $layout; } } public function setLayout($layout) { $this->layout = $layout; } } ?>