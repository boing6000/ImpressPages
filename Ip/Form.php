<?php namespace Ip; class Form { const METHOD_POST = 'post'; const METHOD_GET = 'get'; const ENVIRONMENT_ADMIN = 'admin'; const ENVIRONMENT_PUBLIC = 'public'; protected $fieldsets; protected $method; protected $action; protected $attributes; protected $classes; protected $environment; protected $ajaxSubmit; protected $validate; public function __construct() { $this->fieldsets = array(); $this->method = self::METHOD_POST; $this->action = ipConfig()->baseUrl(); $this->attributes = array(); $this->classes = array(); $this->ajaxSubmit = true; $this->validate = true; $this->addClass('ipsAjaxSubmit'); if (ipRoute()->isAdmin()) { $this->setEnvironment(self::ENVIRONMENT_ADMIN); } else { $this->addClass('ipModuleForm'); $this->setEnvironment(self::ENVIRONMENT_PUBLIC); } $this->addCsrfCheck(); $this->addSpamCheck(); } public function addSpamCheck() { $tokenField = new \Ip\Form\Field\Antispam(); $tokenField->setName('antispam'); $this->addField($tokenField); } public function removeSpamCheck() { $this->removeField('antispam'); } public function setEnvironment($environment) { if ($environment == self::ENVIRONMENT_ADMIN) { $this->addClass('ipsModuleFormAdmin'); $this->removeClass('ipModuleForm'); $this->removeClass('ipsModuleFormPublic'); } else { $this->addClass('ipsModuleFormPublic'); $this->addClass('ipModuleForm'); $this->removeClass('ipsModuleFormAdmin'); } $this->environment = $environment; } public function getEnvironment() { return $this->environment; } public function addCsrfCheck() { $tokenField = new \Ip\Form\Field\Csrf(); $tokenField->setName('securityToken'); $this->addField($tokenField); } public function removeCsrfCheck() { $this->removeField('securityToken'); } public function removeField($fieldName) { $count = 0; foreach ($this->fieldsets as $fieldset) { $count += $fieldset->removeField($fieldName); } return $count; } public function validate($data) { $fields = $this->getFields(); $errors = array(); foreach ($fields as $field) { $error = $field->validate($data, $field->getName(), $this->getEnvironment()); if ($error !== false) { $errors[$field->getValidationInputName()] = $error; } } return $errors; } public function filterValues($data) { $answer = array(); $fields = $this->getFields(); foreach ($fields as $field) { if (array_key_exists($field->getName(), $data)) { $answer[$field->getName()] = $data[$field->getName()]; } } return $answer; } public function addFieldset($fieldset) { if (is_string($fieldset)) { $fieldset = new \Ip\Form\Fieldset($fieldset); } $this->fieldsets[] = $fieldset; } public function addField(\Ip\Form\Field $field) { if (count($this->fieldsets) == 0) { $this->addFieldset(new Form\Fieldset()); } end($this->fieldsets)->addField($field); } public function setMethod($method) { switch ($method) { case self::METHOD_POST: case self::METHOD_GET: $this->method = $method; break; default: throw new Exception ('Unknown method "' . $method . '"'); } } public function getMethod() { return $this->method; } public function setAction($action) { $this->action = $action; } public function getAction() { return $this->action; } public function render(\Ip\View $view = null) { if (!$view) { if ($this->getEnvironment() == self::ENVIRONMENT_ADMIN) { $view = ipView('Form/adminView/form.php'); } else { $view = ipView('Form/publicView/form.php'); } } $view->setVariables( array( 'form' => $this ) ); return $view->render(); } public function getFieldsets() { return $this->fieldsets; } public function getFields() { $fieldsets = $this->getFieldsets(); $fields = array(); foreach ($fieldsets as $fieldset) { $fields = array_merge($fields, $fieldset->getFields()); } return $fields; } public function getField($name) { $allFields = $this->getFields(); foreach ($allFields as $field) { if ($field->getName() == $name) { return $field; } } return false; } public function addAttribute($name, $value) { $this->attributes[$name] = $value; } public function removeAttribute($name) { unset($this->attributes[$name]); } public function getAttributes() { return $this->attributes; } public function getAttributesStr() { $answer = ''; foreach ($this->getAttributes() as $attributeKey => $attributeValue) { $answer .= ' ' . htmlspecialchars($attributeKey) . '="' . htmlspecialchars($attributeValue) . '"'; } return $answer; } public function addClass($cssClass) { $this->classes[$cssClass] = 1; } public function removeClass($cssClass) { unset($this->classes[$cssClass]); } public function getClasses() { return array_keys($this->classes); } public function getClassesStr() { $answer = ''; foreach ($this->getClasses() as $class) { $answer .= ' ' . $class; } return 'class="' . $answer . '"'; } public function setAjaxSubmit($ajaxSubmit) { if ($ajaxSubmit) { $this->addClass('ipsAjaxSubmit'); } else { $this->removeClass('ipsAjaxSubmit'); } $this->ajaxSubmit = $ajaxSubmit; } public function getAjaxSubmit() { return (bool)$this->ajaxSubmit; } public function setValidate($validate) { if ($validate) { $this->addClass('ipsValidate'); } else { $this->removeClass('ipsValidate'); } $this->validate = $validate; } public function getValidate($validate) { return (bool)$this->validate; } public function __toString() { return $this->render(); } } ?>