<?php function ipApplication() { return \Ip\ServiceLocator::application(); } function ipSecurityToken() { return ipApplication()->getSecurityToken(); } function ipGetOption($option, $defaultValue = null) { return \Ip\ServiceLocator::options()->getOption( $option, $defaultValue ); } function ipGetOptionLang($option, $languageCode = null, $defaultValue = null) { if ( $languageCode == null ) { $languageCode = ipContent()->getCurrentLanguage()->getCode(); } return \Ip\ServiceLocator::options()->getOptionLang( $option, $languageCode, $defaultValue ); } function ipSetOption($option, $value) { \Ip\ServiceLocator::options()->setOption( $option, $value ); } function ipSetOptionLang($option, $value, $languageCode = null) { if ( $languageCode == null ) { $languageCode = ipContent()->getCurrentLanguage()->getCode(); } \Ip\ServiceLocator::options()->setOptionLang( $option, $languageCode, $value ); } function ipRemoveOption($option) { \Ip\ServiceLocator::options()->removeOption( $option ); } function ipRemoveOptionLang($option, $languageId) { \Ip\ServiceLocator::options()->removeOptionLang( $option, $languageId ); } function ipConfig() { return \Ip\ServiceLocator::config(); } function ipContent() { return \Ip\ServiceLocator::content(); } function ipAddJs($file, $attributes = null, $priority = 50, $cacheFix = true) { if ( preg_match( '%(https?:)?//%', $file ) ) { $absoluteUrl = $file; } else { if ( preg_match( '%^(Plugin|Theme|file|Ip)/%', $file ) ) { $relativePath = $file; } else { $relativePath = \Ip\Internal\PathHelper::ipRelativeDir( 1 ) . $file; } $absoluteUrl = ipFileUrl( $relativePath ); } \Ip\ServiceLocator::pageAssets()->addJavascript( $absoluteUrl, $attributes, $priority, $cacheFix ); } function ipAddJsVariable($name, $value) { \Ip\ServiceLocator::pageAssets()->addJavascriptVariable( $name, $value ); } function ipAddJsContent($name, $value, $priority = 50) { \Ip\ServiceLocator::pageAssets()->addJavascriptContent( $name, $value, $priority ); } function ipAddCss($file, $attributes = null, $priority = 50, $cacheFix = true) { if ( preg_match( '%(https?:)?//%', $file ) ) { $absoluteUrl = $file; } else { if ( preg_match( '%^(Plugin|Theme|file|Ip)/%', $file ) ) { $relativePath = $file; } else { $relativePath = \Ip\Internal\PathHelper::ipRelativeDir( 1 ) . $file; } $absoluteUrl = ipFileUrl( $relativePath ); } \Ip\ServiceLocator::pageAssets()->addCss( $absoluteUrl, $attributes, $priority, $cacheFix ); } function ipLog() { return \Ip\ServiceLocator::log(); } function ipJs() { return \Ip\ServiceLocator::pageAssets()->generateJavascript(); } function ipHead() { return \Ip\ServiceLocator::pageAssets()->generateHead(); } function ipSetLayout($file) { $response = \Ip\ServiceLocator::response(); if ( method_exists( $response, 'setLayout' ) ) { $response->setLayout( $file ); } else { ipLog()->error( 'Response.cantSetLayout: Response has no setLayout method', array( 'response' => $response ) ); } } function ipResponse() { return \Ip\ServiceLocator::response(); } function ipGetLayout() { $response = \Ip\ServiceLocator::response(); if ( method_exists( $response, 'getLayout' ) ) { return $response->getLayout(); } else { ipLog()->error( 'Response.cantGetLayout: Response method has no method getLayout', array( 'response' => $response ) ); } return null; } function ipBlock($block) { return \Ip\ServiceLocator::content()->generateBlock( $block ); } function ipSlot($slot, $params = array()) { return \Ip\ServiceLocator::slots()->generateSlot( $slot, $params ); } function ipIsManagementState() { return \Ip\Internal\Content\Service::isManagementMode(); } function ipRequest() { return \Ip\ServiceLocator::request(); } function ipEvent($event, $data = array()) { return \Ip\ServiceLocator::dispatcher()->event( $event, $data ); } function ipFilter($event, $value, $data = array()) { return \Ip\ServiceLocator::dispatcher()->filter( $event, $value, $data ); } function ipJob($eventName, $data = array()) { return \Ip\ServiceLocator::dispatcher()->job( $eventName, $data ); } function ipDb() { return \Ip\ServiceLocator::db(); } function esc($string) { return htmlspecialchars( $string, ENT_QUOTES, 'UTF-8' ); } function escTextarea($value) { return htmlspecialchars( $value, ENT_QUOTES, 'UTF-8' ); } function escAttr($value) { return htmlspecialchars( $value, ENT_QUOTES, 'UTF-8' ); } function __($text, $domain, $esc = 'html') { $translation = \Ip\ServiceLocator::translator()->translate( $text, $domain ); if ( 'html' == $esc ) { return esc( $translation ); } elseif ( false === $esc ) { return $translation; } elseif ( 'attr' == $esc ) { return escAttr( $translation ); } elseif ( 'textarea' == $esc ) { return escTextarea( $translation ); } throw new \Ip\Exception( 'Unknown escape method: {$esc}' ); } function ipSetTranslationLanguage($languageCode, \Closure $closure = null) { if ( $closure ) { $oldLanguage = ipSetTranslationLanguage( $languageCode ); $result = $closure(); ipSetTranslationLanguage( $oldLanguage ); return $result; } else { $oldLanguage = \Ip\ServiceLocator::translator()->getLocale(); \Ip\ServiceLocator::translator()->setLocale( $languageCode ); return $oldLanguage; } } function _e($text, $domain, $esc = 'html') { echo __( $text, $domain, $esc ); } function ipFile($path) { global $ipFile_baseDir, $ipFile_coreDir, $ipFile_composerPlugins; if ( ! $ipFile_baseDir ) { $ipFile_baseDir = ipConfig()->get( 'baseDir' ); $ipFile_coreDir = ipConfig()->get( 'coreDir' ); $ipFile_composerPlugins = ipConfig()->get( 'composerPlugins' ); } if ( strpos( $path, 'Plugin/' ) === 0 ) { $parts = explode( '/', $path ); if ( empty( $parts[1] ) ) { return $ipFile_baseDir . '/' . $path; } if ( ! empty( $ipFile_composerPlugins[ $parts[1] ] ) ) { return dirname( $ipFile_baseDir ) . '/' . $ipFile_composerPlugins[ $parts[1] ] . '/' . implode( '/', array_slice( $parts, 2 ) ); } return $ipFile_baseDir . '/' . $path; } if ( strpos( $path, 'Theme/' ) === 0 || strpos( $path, 'file/' ) === 0 || $path === '' ) { return $ipFile_baseDir . '/' . $path; } if ( strpos( $path, 'ThemeAdmin/' ) === 0 || strpos( $path, 'file/' ) === 0 || $path === '' ) { return $ipFile_baseDir . '/' . $path; } if ( strpos( $path, 'Ip/' ) === 0 ) { return $ipFile_coreDir . '/' . $path; } throw new \Ip\Exception( 'ipFile function accepts only paths, that start with Ip/, Plugin/, Theme/, file/. Requested path: ' . $path ); } function ipFileUrl($path) { $overrides = ipConfig()->get( 'urlOverrides' ); if ( $overrides ) { foreach ( $overrides as $prefix => $newPath ) { if ( strpos( $path, $prefix ) === 0 ) { return substr_replace( $path, $newPath, 0, strlen( $prefix ) ); } } } return ipConfig()->baseUrl() . $path; } function ipActionUrl($query) { return ipConfig()->baseUrl() . '?' . http_build_query( $query ); } function ipRouteUrl($route, $params = array()) { return ipHomeUrl() . \Ip\ServiceLocator::router()->generate( $route, $params ); } function ipThemeUrl($path) { return ipFileUrl( 'Theme/' . ipConfig()->theme() . '/' . $path ); } function ipThemeFile($path) { return ipFile( 'Theme/' . ipConfig()->theme() . '/' . $path ); } function ipHomeUrl($languageCode = null) { $homeUrl = ipConfig()->baseUrl(); if ( ipConfig()->get( 'rewritesDisabled' ) ) { $homeUrl .= 'index.php/'; } if ( $languageCode == null ) { $language = ipContent()->getCurrentLanguage(); } else { $language = ipContent()->getLanguageByCode( $languageCode ); } $homeUrl .= $language->getUrlPath(); return $homeUrl; } function ipRenderWidget($widgetName, $data = array(), $skin = null) { return \Ip\Internal\Content\Model::generateWidgetPreviewFromStaticData( $widgetName, $data, $skin ); } function ipFormatBytes($bytes, $context, $precision = 0, $languageCode = null) { return \Ip\Internal\FormatHelper::formatBytes( $bytes, $context, $precision, $languageCode ); } function ipFormatPrice($price, $currency, $context, $languageCode = null) { return \Ip\Internal\FormatHelper::formatPrice( $price, $currency, $context, $languageCode ); } function ipFormatDate($unixTimestamp, $context, $languageCode = null) { return \Ip\Internal\FormatHelper::formatDate( $unixTimestamp, $context, $languageCode ); } function ipFormatTime($unixTimestamp, $context, $languageCode = null) { return \Ip\Internal\FormatHelper::formatTime( $unixTimestamp, $context, $languageCode ); } function ipFormatDateTime($unixTimestamp, $context, $languageCode = null) { return \Ip\Internal\FormatHelper::formatDateTime( $unixTimestamp, $context, $languageCode ); } function ipGetThemeOption($name, $default = null) { $themeService = \Ip\Internal\Design\Service::instance(); return $themeService->getThemeOption( $name, $default ); } function ipHtmlAttributes($doctype = null) { $content = \Ip\ServiceLocator::content(); if ( $doctype === null ) { $doctypeConstant = ipConfig()->get( 'defaultDoctype' ); $doctype = constant( '\Ip\Response\Layout::' . $doctypeConstant ); } switch ( $doctype ) { case \Ip\Response\Layout::DOCTYPE_XHTML1_STRICT: case \Ip\Response\Layout::DOCTYPE_XHTML1_TRANSITIONAL: case \Ip\Response\Layout::DOCTYPE_XHTML1_FRAMESET: $lang = $content->getCurrentLanguage()->getCode(); $answer = ' xmlns="http://www.w3.org/1999/xhtml" xml:lang="' . $lang . '" lang="' . $lang . '"'; break; case \Ip\Response\Layout::DOCTYPE_HTML4_STRICT: case \Ip\Response\Layout::DOCTYPE_HTML4_TRANSITIONAL: case \Ip\Response\Layout::DOCTYPE_HTML4_FRAMESET: default: $answer = ''; break; case \Ip\Response\Layout::DOCTYPE_HTML5: $lang = $content->getCurrentLanguage()->getCode(); $answer = ' lang="' . escAttr( $lang ) . '"'; break; } return $answer; } function ipDoctypeDeclaration($doctype = null) { if ( $doctype === null ) { $doctypeConstant = ipConfig()->get( 'defaultDoctype' ); $doctype = constant( '\Ip\Response\Layout::' . $doctypeConstant ); } switch ( $doctype ) { case \Ip\Response\Layout::DOCTYPE_XHTML1_STRICT: $answer = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'; break; case \Ip\Response\Layout::DOCTYPE_XHTML1_TRANSITIONAL: $answer = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'; break; case \Ip\Response\Layout::DOCTYPE_XHTML1_FRAMESET: $answer = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">'; break; case \Ip\Response\Layout::DOCTYPE_HTML4_STRICT: $answer = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'; break; case \Ip\Response\Layout::DOCTYPE_HTML4_TRANSITIONAL: $answer = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">'; break; case \Ip\Response\Layout::DOCTYPE_HTML4_FRAMESET: $answer = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">'; break; case \Ip\Response\Layout::DOCTYPE_HTML5: $answer = '<!DOCTYPE html>'; break; default: throw new Exception( 'Unknown doctype: ' . $doctype ); } return $answer; } function ipTable($table, $as = false) { $prefix = ipConfig()->tablePrefix(); $answer = '`' . $prefix . $table . '`'; if ( $as === true ) { if ( $prefix ) { $answer .= ' as `' . $table . '` '; } } elseif ( $as ) { $answer .= ' as `' . $as . '` '; } return $answer; } function ipAdminPermission($permission, $administratorId = null) { return \Ip\ServiceLocator::adminPermissions()->hasPermission( $permission, $administratorId ); } function ipSendEmail($from, $fromName, $to, $toName, $subject, $content, $urgent = true, $html = true, $files = null) { $emailQueue = new \Ip\Internal\Email\Module(); $emailQueue->addEmail( $from, $fromName, $to, $toName, $subject, $content, $urgent, $html, $files ); $emailQueue->send(); } function ipEmailTemplate($data) { return ipView( 'Internal/Config/view/email.php', $data )->render(); } function ipView($file, $data = array(), $_callerDepth = 0) { if ( $file[0] == '/' || $file[1] == ':' ) { return new \Ip\View( $file, $data ); } if ( preg_match( '%^(Plugin|Theme|file|Ip)/%', $file ) ) { $relativePath = $file; } else { $relativePath = \Ip\Internal\PathHelper::ipRelativeDir( $_callerDepth + 1 ) . $file; } $fileInThemeDir = ipThemeFile( \Ip\View::OVERRIDE_DIR . '/' . $relativePath ); if ( is_file( $fileInThemeDir ) ) { return new \Ip\View( $fileInThemeDir, $data ); } $fileInThemeDir = ipConfig()->get( 'baseDir' ) . '/ThemeAdmin/' . ipConfig()->get('adminTheme') . '/' . \Ip\View::OVERRIDE_DIR . '/' . $relativePath ; if ( is_file( $fileInThemeDir ) ) { return new \Ip\View( $fileInThemeDir, $data ); } $absolutePath = ipFile( $relativePath ); if ( file_exists( $absolutePath ) ) { return new \Ip\View( $absolutePath, $data ); } if ( strpos( $relativePath, 'Theme/' . ipConfig()->theme() . '/override/' ) !== 0 ) { $file = esc( $file ); throw new \Ip\Exception\View( "View {$file} not found." ); } $pathFromWebsiteRoot = str_replace( ipFile( 'Theme/' . ipConfig()->theme() . '/override/' ), '', $absolutePath ); return ipView( $pathFromWebsiteRoot ); } function ipStorage() { return \Ip\ServiceLocator::storage(); } function ipAdminId() { return \Ip\Internal\Admin\Service::adminId(); } function ipPageStorage($pageId = null) { if ( ! $pageId ) { $page = ipContent()->getCurrentPage(); if ( ! $page ) { return null; } $pageId = $page->getId(); } return new \Ip\PageStorage( $pageId ); } function ipThemeStorage($theme = null) { if ( ! $theme ) { $theme = ipConfig()->theme(); } return new \Ip\ThemeStorage( $theme ); } function ipReflection($file, $options, $desiredName = null, $onDemand = true) { $reflectionService = \Ip\Internal\Repository\ReflectionService::instance(); $reflection = $reflectionService->getReflection( $file, $options, $desiredName, $onDemand ); return $reflection; } function ipReflectionException() { $reflectionService = \Ip\Internal\Repository\ReflectionService::instance(); return $reflectionService->getLastException(); } function ipPage($pageId) { return new \Ip\Page( $pageId ); } function ipRepositoryAddFile($file, $desiredName = null) { $repositoryModel = \Ip\Internal\Repository\Model::instance(); return $repositoryModel->addFile( $file, $desiredName ); } function ipBindFile($file, $plugin, $id, $baseDir = 'file/repository/') { \Ip\Internal\Repository\Model::bindFile( $file, $plugin, $id, $baseDir ); } function ipUnbindFile($file, $plugin, $id, $baseDir = 'file/repository/') { \Ip\Internal\Repository\Model::unbindFile( $file, $plugin, $id, $baseDir ); } function ipUser() { $user = new \Ip\User(); return $user; } function ipEcommerce() { return \Ip\ServiceLocator::ecommerce(); } function ipRoute() { return \Ip\ServiceLocator::route(); } function ipGridController($config) { $request = ipRequest()->getRequest(); if ( empty( $request['method'] ) ) { ipAddJs( 'Ip/Internal/Grid/assets/grid.js' ); ipAddJs( 'Ip/Internal/Grid/assets/gridInit.js' ); ipAddJs( 'Ip/Internal/Grid/assets/subgridField.js' ); $backtrace = debug_backtrace(); if ( empty( $backtrace[1]['object'] ) || empty( $backtrace[1]['function'] ) || empty( $backtrace[1]['class'] ) ) { throw new \Ip\Exception( 'ipGridController() function must be used only in controller.' ); } $method = $backtrace[1]['function']; $controllerClassParts = explode( '\\', $backtrace[1]['class'] ); if ( empty( $controllerClassParts[2] ) ) { throw new \Ip\Exception( 'ipGridController() function must be used only in controller (' . $backtrace[1]['class'] . '). ' ); } $plugin = $controllerClassParts[1]; switch ( $controllerClassParts[2] ) { case 'AdminController': $gateway = array( 'aa' => $plugin . '.' . $method ); break; case 'SiteController': $gateway = array( 'sa' => $plugin . '.' . $method ); break; case 'PublicController': $gateway = array( 'pa' => $plugin . '.' . $method ); break; default: throw new \Ip\Exception( 'ipGridController() function must be used only in controller (' . $backtrace[1]['class'] . '). ' ); } if ( ! empty( $config['gatewayData'] ) ) { $gateway = array_merge( $config['gatewayData'], $gateway ); } $variables = array( 'gateway' => ipActionUrl( $gateway ) ); $content = ipView( 'Ip/Internal/Grid/view/placeholder.php', $variables ); return $content; } else { $worker = new \Ip\Internal\Grid\Worker( $config ); $result = $worker->handleMethod( ipRequest() ); if ( is_array( $result ) && ! empty( $result['error'] ) && ! empty( $result['errors'] ) ) { return new \Ip\Response\Json( $result ); } return new \Ip\Response\JsonRpc( $result ); } } function ipConvertCurrency($amount, $sourceCurrency, $destinationCurrency) { $result = ipJob( 'ipConvertCurrency', compact( 'amount', 'sourceCurrency', 'destinationCurrency' ) ); return $result; } function ipUnoccupiedFileName($dir, $desiredName, $sanitize = true) { $availableFileName = \Ip\Internal\File\Functions::genUnoccupiedName( $desiredName, $dir, '', $sanitize ); return $availableFileName; } function ipReplacePlaceholders($content, $context = 'Ip', $customValues = array()) { $info = array ( 'content' => $content, 'context' => $context, 'customValues' => $customValues ); if (is_array($content)) { $answer = array(); foreach($content as $item) { $answer[] = ipJob('ipReplacePlaceholders', $info); } return $answer; } else { return ipJob('ipReplacePlaceholders', $info); } } ?>