<?php namespace Ip; class Response { protected $statusCode = null; protected $statusMessage = null; protected $headers = array(); protected $content = null; public function __construct($content = null, $headers = null, $statusCode = 200) { if ($content !== null) { $this->setContent($content); } if ($statusCode !== null) { $this->setStatusCode($statusCode); } if ($headers !== null) { if (is_array($headers)) { $this->headers = $headers; } elseif (is_string($headers)) { $this->addHeader($headers); } } } public function addHeader($value) { $this->headers[] = $value; } public function getHeaders() { return $this->headers; } public function setStatusCode($code) { $this->statusCode = (int)$code; return $this; } public function getStatusCode() { return $this->statusCode; } public function setStatusMessage($message) { $this->statusMessage = $message; return $this; } public function isClientError() { $code = $this->getStatusCode(); $error = $code < 500 && $code >= 400; return ($error); } public function isForbidden() { $forbidden = 403 == $this->getStatusCode(); return $forbidden; } public function isInformational() { $code = $this->getStatusCode(); $info = $code >= 100 && $code < 200; return $info; } public function isNotFound() { $notFound = 404 === $this->getStatusCode(); return $notFound; } public function isOk() { $ok = 200 === $this->getStatusCode(); return $ok; } public function isServerError() { $code = $this->getStatusCode(); $error = 500 <= $code && 600 > $code; return $error; } public function isRedirect() { $code = $this->getStatusCode(); $redirect = 300 <= $code && 400 > $code; return $redirect; } public function isSuccess() { $code = $this->getStatusCode(); $success = 200 <= $code && 300 > $code; return $success; } public function setContent($content) { $this->content = $content; return $this; } public function getContent() { return $this->content; } public function toString() { return $this->getContent(); } public function render() { return $this->getContent(); } public function send() { $headers = $this->getHeaders(); foreach ($headers as $header) { header($header); } if ($this->getStatusCode()) { if (function_exists('http_response_code')) { http_response_code($this->getStatusCode()); } else { header('X-Ignore-This: workaround', true, $this->getStatusCode()); } } echo $this->render(); } } ?>